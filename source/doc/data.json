{
    "project": {},
    "files": {
        "app.js": {
            "name": "app.js",
            "modules": {
                "App": 1
            },
            "classes": {
                "App": 1
            },
            "fors": {
                "window.m": 1
            },
            "namespaces": {}
        },
        "context.js": {
            "name": "context.js",
            "modules": {},
            "classes": {
                "Context": 1
            },
            "fors": {
                "window.m": 1
            },
            "namespaces": {}
        },
        "event.js": {
            "name": "event.js",
            "modules": {
                "Mootor": 1
            },
            "classes": {
                "Event": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "mootor.js": {
            "name": "mootor.js",
            "modules": {},
            "classes": {
                "window.m": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "route.js": {
            "name": "route.js",
            "modules": {
                "Router": 1
            },
            "classes": {
                "Route": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "router.js": {
            "name": "router.js",
            "modules": {},
            "classes": {
                "Router": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ui.js": {
            "name": "ui.js",
            "modules": {
                "UI": 1
            },
            "classes": {
                "UI": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiapp.js": {
            "name": "uiapp.js",
            "modules": {},
            "classes": {
                "UIApp": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiform.js": {
            "name": "uiform.js",
            "modules": {},
            "classes": {
                "UIForm": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformcamera.js": {
            "name": "uiformcamera.js",
            "modules": {},
            "classes": {
                "UIFormCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformcheckbox.js": {
            "name": "uiformcheckbox.js",
            "modules": {},
            "classes": {
                "UIFormCheckbox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformdate.js": {
            "name": "uiformdate.js",
            "modules": {},
            "classes": {
                "UIFormDate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformdraw.js": {
            "name": "uiformdraw.js",
            "modules": {},
            "classes": {
                "UIFormDraw": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformfieldset.js": {
            "name": "uiformfieldset.js",
            "modules": {},
            "classes": {
                "UIFormFieldset": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformgeo.js": {
            "name": "uiformgeo.js",
            "modules": {},
            "classes": {
                "UIFormGeo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiforminput.js": {
            "name": "uiforminput.js",
            "modules": {},
            "classes": {
                "UIFormInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformoption.js": {
            "name": "uiformoption.js",
            "modules": {},
            "classes": {
                "UIFormOption": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformpassword.js": {
            "name": "uiformpassword.js",
            "modules": {},
            "classes": {
                "UIFormPassword": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformpseudoinput.js": {
            "name": "uiformpseudoinput.js",
            "modules": {},
            "classes": {
                "UIFormPseudoInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformselect.js": {
            "name": "uiformselect.js",
            "modules": {},
            "classes": {
                "UIFormSelect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformtext.js": {
            "name": "uiformtext.js",
            "modules": {},
            "classes": {
                "UIFormText": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformtextarea.js": {
            "name": "uiformtextarea.js",
            "modules": {},
            "classes": {
                "UIFormTextArea": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformtime.js": {
            "name": "uiformtime.js",
            "modules": {},
            "classes": {
                "UIFormTime": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiformtoggleswitch.js": {
            "name": "uiformtoggleswitch.js",
            "modules": {},
            "classes": {
                "UIFormToggleSwitch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiheader.js": {
            "name": "uiheader.js",
            "modules": {},
            "classes": {
                "UIHeader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiloading.js": {
            "name": "uiloading.js",
            "modules": {},
            "classes": {
                "UILoading": 1
            },
            "fors": {
                "UIApp": 1
            },
            "namespaces": {}
        },
        "uinavbar.js": {
            "name": "uinavbar.js",
            "modules": {},
            "classes": {
                "UINavBar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uinavitem.js": {
            "name": "uinavitem.js",
            "modules": {},
            "classes": {
                "UINavItem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uipanel.js": {
            "name": "uipanel.js",
            "modules": {},
            "classes": {
                "UIPanel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "uiview.js": {
            "name": "uiview.js",
            "modules": {},
            "classes": {
                "UIView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "view.js": {
            "name": "view.js",
            "modules": {
                "View": 1
            },
            "classes": {
                "View": 1
            },
            "fors": {
                "App": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "App": {
            "name": "App",
            "submodules": {},
            "classes": {
                "App": 1,
                "Context": 1
            },
            "fors": {
                "window.m": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "context.js",
            "line": 1,
            "description": "The App class defines the main object of the applications"
        },
        "Mootor": {
            "name": "Mootor",
            "submodules": {},
            "classes": {
                "window.m": 1,
                "Event": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "event.js",
            "line": 1,
            "description": "The Event class defines and manage events",
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "Router": {
            "name": "Router",
            "submodules": {},
            "classes": {
                "Route": 1,
                "Router": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "router.js",
            "line": 1,
            "description": "The Route class is for defining a route"
        },
        "UI": {
            "name": "UI",
            "submodules": {},
            "classes": {
                "UI": 1,
                "UIApp": 1,
                "UIForm": 1,
                "UIFormCamera": 1,
                "UIFormCheckbox": 1,
                "UIFormDate": 1,
                "UIFormDraw": 1,
                "UIFormFieldset": 1,
                "UIFormGeo": 1,
                "UIFormInput": 1,
                "UIFormOption": 1,
                "UIFormPassword": 1,
                "UIFormPseudoInput": 1,
                "UIFormSelect": 1,
                "UIFormText": 1,
                "UIFormTextArea": 1,
                "UIFormTime": 1,
                "UIFormToggleSwitch": 1,
                "UIHeader": 1,
                "UILoading": 1,
                "UINavBar": 1,
                "UINavItem": 1,
                "UIPanel": 1,
                "UIView": 1
            },
            "fors": {
                "UIApp": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "uiview.js",
            "line": 1,
            "description": "The UI class is the class for all user interface elements.\nIt is not directly used, but extended by many other classes."
        },
        "View": {
            "name": "View",
            "submodules": {},
            "classes": {
                "View": 1
            },
            "fors": {
                "App": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "view.js",
            "line": 1,
            "description": "The View class handles each screen of the application. \nA list of views is specified in the applications options\nand the files are loaded from the views/ folder.\nEach view has a viewName.js and a viewName.html file.\nThe viewName.js file defines options for the view."
        }
    },
    "classes": {
        "App": {
            "name": "App",
            "shortname": "App",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "app.js",
            "line": 22,
            "description": "The App class defines the main object of the applications",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "An object defining options for the application.\n* views - An array with a list of view names",
                    "type": "Object"
                }
            ]
        },
        "window.m": {
            "name": "window.m",
            "shortname": "window.m",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mootor",
            "namespace": "",
            "file": "mootor.js",
            "line": 22,
            "description": "m public global object",
            "static": 1
        },
        "Context": {
            "name": "Context",
            "shortname": "Context",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "namespace": "",
            "file": "context.js",
            "line": 1,
            "description": "Information about the context of the application (ej: device's viewport)",
            "return": {
                "description": "object"
            },
            "static": 1
        },
        "Event": {
            "name": "Event",
            "shortname": "Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mootor",
            "namespace": "",
            "file": "event.js",
            "line": 1,
            "description": "The Event class defines and manage events",
            "access": "private",
            "tagname": "",
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "Route": {
            "name": "Route",
            "shortname": "Route",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Router",
            "namespace": "",
            "file": "route.js",
            "line": 1,
            "description": "The Route class is for defining a route",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "Router": {
            "name": "Router",
            "shortname": "Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Router",
            "namespace": "",
            "file": "router.js",
            "line": 1,
            "description": "The Router class is for defining routes",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UI": {
            "name": "UI",
            "shortname": "UI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "ui.js",
            "line": 1,
            "description": "The UI class is the class for all user interface elements.\nIt is not directly used, but extended by many other classes.",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIApp": {
            "name": "UIApp",
            "shortname": "UIApp",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiapp.js",
            "line": 1,
            "description": "The UIApp class is the UI representation of an app",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIForm": {
            "name": "UIForm",
            "shortname": "UIForm",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiform.js",
            "line": 3,
            "description": "The UIForm is a form to input data",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormCamera": {
            "name": "UIFormCamera",
            "shortname": "UIFormCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformcamera.js",
            "line": 1,
            "description": "UIFormCamera is a camera pseudo-input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormCheckbox": {
            "name": "UIFormCheckbox",
            "shortname": "UIFormCheckbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformcheckbox.js",
            "line": 1,
            "description": "UIFormCheckbox is a checkbox input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormDate": {
            "name": "UIFormDate",
            "shortname": "UIFormDate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformdate.js",
            "line": 1,
            "description": "UIFormDate is a date input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormDraw": {
            "name": "UIFormDraw",
            "shortname": "UIFormDraw",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformdraw.js",
            "line": 1,
            "description": "UIFormDraw is a draw pseudo-input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormFieldset": {
            "name": "UIFormFieldset",
            "shortname": "UIFormFieldset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformfieldset.js",
            "line": 1,
            "description": "UIFormFieldset is a fieldset item of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormGeo": {
            "name": "UIFormGeo",
            "shortname": "UIFormGeo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformgeo.js",
            "line": 1,
            "description": "UIFormGeo is a date pseudo-input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormInput": {
            "name": "UIFormInput",
            "shortname": "UIFormInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiforminput.js",
            "line": 1,
            "description": "UIFormInput is an input item of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormOption": {
            "name": "UIFormOption",
            "shortname": "UIFormOption",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformoption.js",
            "line": 1,
            "description": "UIFormOption is an option input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormPassword": {
            "name": "UIFormPassword",
            "shortname": "UIFormPassword",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformpassword.js",
            "line": 1,
            "description": "UIFormPassword is a password input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormPseudoInput": {
            "name": "UIFormPseudoInput",
            "shortname": "UIFormPseudoInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformpseudoinput.js",
            "line": 1,
            "description": "UIFormPseudoInput is a pseudo-input item of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormSelect": {
            "name": "UIFormSelect",
            "shortname": "UIFormSelect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformselect.js",
            "line": 1,
            "description": "UIFormSelect is a select input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormText": {
            "name": "UIFormText",
            "shortname": "UIFormText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformtext.js",
            "line": 1,
            "description": "UIFormText is a text input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormTextArea": {
            "name": "UIFormTextArea",
            "shortname": "UIFormTextArea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformtextarea.js",
            "line": 1,
            "description": "UIFormTextArea is a textarea input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormTime": {
            "name": "UIFormTime",
            "shortname": "UIFormTime",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformtime.js",
            "line": 1,
            "description": "UIFormTime is a time input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormToggleSwitch": {
            "name": "UIFormToggleSwitch",
            "shortname": "UIFormToggleSwitch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiformtoggleswitch.js",
            "line": 1,
            "description": "UIFormToggleSwitch is a toggle switch pseudo-input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIHeader": {
            "name": "UIHeader",
            "shortname": "UIHeader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiheader.js",
            "line": 1,
            "description": "The UIHeader class is a navigational element at the top or bottom of the page (header or footer)",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UILoading": {
            "name": "UILoading",
            "shortname": "UILoading",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiloading.js",
            "line": 1,
            "description": "The UILoading is the loading indicator",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UINavBar": {
            "name": "UINavBar",
            "shortname": "UINavBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uinavbar.js",
            "line": 1,
            "description": "The UINavBar class is a navigational element at the top or bottom of the page (header or footer)",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UINavItem": {
            "name": "UINavItem",
            "shortname": "UINavItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uinavitem.js",
            "line": 1,
            "description": "The UINavItem is an item of a UINavBar, like an action button or an anchor link",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIPanel": {
            "name": "UIPanel",
            "shortname": "UIPanel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uipanel.js",
            "line": 1,
            "description": "A Panel to show views",
            "extends": "UI",
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "UIView": {
            "name": "UIView",
            "shortname": "UIView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "uiview.js",
            "line": 1,
            "description": "The UIView class is the UI representation of a view",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        },
        "View": {
            "name": "View",
            "shortname": "View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "",
            "file": "view.js",
            "line": 1,
            "description": "The View class handles each screen of the application. \nA list of views is specified in the applications options\nand the files are loaded from the views/ folder.\nEach view has a viewName.js and a viewName.html file.\nThe viewName.js file defines options for the view.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "An object defining options for the current view.\n* constructor - A function that will be run after the view has loaded (optional).\n* animation - a string defining the type of animation used to show this view (one of: \"slide-left\", \"slide-right\", \"none\").",
                    "type": "Object"
                }
            ],
            "author": "Mart√≠n Szyszlican (martinsz [at] gmail.com)"
        }
    },
    "classitems": [
        {
            "file": "app.js",
            "line": 38,
            "description": "The application's version number\nNote: It's not Mootor version, this value is defined in application code, not framework code.",
            "itemtype": "property",
            "name": "version",
            "type": "Strign",
            "class": "App",
            "module": "App"
        },
        {
            "file": "app.js",
            "line": 56,
            "description": "Stores the navigation history. \nAn array of views, ordered in the sequence that they were visited by the user.",
            "itemtype": "property",
            "name": "history",
            "type": "array",
            "class": "App",
            "module": "App"
        },
        {
            "file": "app.js",
            "line": 66,
            "description": "The application's version number\nNote: It's not Mootor version, this value is defined in application code, not framework code.",
            "itemtype": "method",
            "name": "version",
            "params": [
                {
                    "name": "version",
                    "description": "The version number or name",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Version number or name",
                "type": "String"
            },
            "class": "App",
            "module": "App"
        },
        {
            "file": "app.js",
            "line": 81,
            "description": "Application settings\nIf called with a key, returns the value. If called with key and value, sets value to key.",
            "itemtype": "method",
            "name": "settings",
            "params": [
                {
                    "name": "key",
                    "description": "The name of the setting",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the setting",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "object the setting value"
            },
            "class": "App",
            "module": "App"
        },
        {
            "file": "app.js",
            "line": 99,
            "description": "Go to a view",
            "itemtype": "method",
            "name": "go",
            "chainable": 1,
            "params": [
                {
                    "name": "url",
                    "description": "The url to go",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Route"
            },
            "class": "App",
            "module": "App"
        },
        {
            "file": "app.js",
            "line": 124,
            "description": "Go to the previous view in the history",
            "itemtype": "method",
            "name": "back",
            "chainable": 1,
            "return": {
                "description": "Route"
            },
            "class": "App",
            "module": "App"
        },
        {
            "file": "app.js",
            "line": 138,
            "description": "Set callbacks for app events",
            "itemtype": "method",
            "name": "on",
            "chainable": 1,
            "return": {
                "description": "App instance"
            },
            "class": "App",
            "module": "App"
        },
        {
            "file": "app.js",
            "line": 175,
            "description": "Creates a new app with the defined options.\nIf the app is already created, it can be called without options to have a reference to the Mootor app. \n\n App instance factory\n\n window.m.app({\n   views: [\n      \"index\",\n      \"view1\"\n   ]\n });",
            "itemtype": "method",
            "name": "app",
            "params": [
                {
                    "name": "views",
                    "description": "A list of view names to be initialized",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "App"
            },
            "class": "window.m",
            "module": "App"
        },
        {
            "file": "context.js",
            "line": 18,
            "description": "System info",
            "itemtype": "property",
            "name": "os",
            "type": "function",
            "class": "Context",
            "module": "App"
        },
        {
            "file": "context.js",
            "line": 25,
            "description": "Browser info",
            "itemtype": "property",
            "name": "browser",
            "type": "string",
            "class": "Context",
            "module": "App"
        },
        {
            "file": "context.js",
            "line": 32,
            "description": "Viewport info",
            "itemtype": "property",
            "name": "viewport",
            "type": "object",
            "class": "Context",
            "module": "App"
        },
        {
            "file": "context.js",
            "line": 53,
            "itemtype": "property",
            "name": "context",
            "type": "Context",
            "class": "window.m",
            "module": "App"
        },
        {
            "file": "event.js",
            "line": 19,
            "description": "Events collection",
            "access": "private",
            "tagname": "",
            "class": "Event",
            "module": "Mootor"
        },
        {
            "file": "event.js",
            "line": 25,
            "description": "Add event to collection",
            "access": "private",
            "tagname": "",
            "class": "Event",
            "module": "Mootor"
        },
        {
            "file": "event.js",
            "line": 36,
            "description": "Dispatch event",
            "access": "private",
            "tagname": "",
            "class": "Event",
            "module": "Mootor"
        },
        {
            "file": "event.js",
            "line": 60,
            "description": "Extend objects with Event methods",
            "access": "private",
            "tagname": "",
            "class": "Event",
            "module": "Mootor"
        },
        {
            "file": "route.js",
            "line": 34,
            "description": "The URL regex referenced by this route",
            "itemtype": "property",
            "name": "regex",
            "type": "String",
            "class": "Route",
            "module": "Router"
        },
        {
            "file": "route.js",
            "line": 42,
            "description": "The view that implements this route\nIf called with no parameters, it returns the currently set view in this route.",
            "itemtype": "method",
            "name": "view",
            "params": [
                {
                    "name": "view",
                    "description": "- The view that implements this route",
                    "type": "View",
                    "optional": true
                }
            ],
            "return": {
                "description": "view"
            },
            "class": "Route",
            "module": "Router"
        },
        {
            "file": "router.js",
            "line": 59,
            "description": "Create a route",
            "itemtype": "method",
            "name": "route",
            "params": [
                {
                    "name": "url",
                    "description": "Regular expresion string",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL to route",
                    "type": "String"
                },
                {
                    "name": "view",
                    "description": "View object",
                    "type": "View"
                }
            ],
            "return": {
                "description": "Route"
            },
            "class": "Router",
            "module": "Router"
        },
        {
            "file": "ui.js",
            "line": 33,
            "description": "DOM element",
            "itemtype": "property",
            "name": "el",
            "return": {
                "description": "",
                "type": "DOM Element"
            },
            "class": "UI",
            "module": "UI"
        },
        {
            "file": "ui.js",
            "line": 41,
            "description": "Zepto/jQuery object for DOM element",
            "itemtype": "property",
            "name": "$el",
            "return": {
                "description": "",
                "type": "Zepto/jQuery object instance"
            },
            "class": "UI",
            "module": "UI"
        },
        {
            "file": "ui.js",
            "line": 49,
            "description": "Shows element (not necesarily, since the element's parent might be hidden or out of view)",
            "itemtype": "method",
            "name": "show",
            "return": {
                "description": "",
                "type": "UI"
            },
            "class": "UI",
            "module": "UI"
        },
        {
            "file": "ui.js",
            "line": 59,
            "description": "Hides element from view",
            "itemtype": "method",
            "name": "hide",
            "return": {
                "description": "",
                "type": "UI"
            },
            "class": "UI",
            "module": "UI"
        },
        {
            "file": "uiform.js",
            "line": 45,
            "description": "Serialize form's data",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "Serialized data in a JSON object",
                "type": "Object"
            },
            "class": "UIForm",
            "module": "UI"
        },
        {
            "file": "uiform.js",
            "line": 55,
            "description": "Clear all form fields",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "class": "UIForm",
            "module": "UI"
        },
        {
            "file": "uiformcamera.js",
            "line": 53,
            "description": "Take a picture",
            "itemtype": "method",
            "name": "take",
            "chainable": 1,
            "class": "UIFormCamera",
            "module": "UI"
        },
        {
            "file": "uiformcamera.js",
            "line": 63,
            "description": "Choose a picture",
            "itemtype": "method",
            "name": "choose",
            "chainable": 1,
            "class": "UIFormCamera",
            "module": "UI"
        },
        {
            "file": "uiformcamera.js",
            "line": 73,
            "description": "Returns all pictures paths",
            "itemtype": "method",
            "name": "all",
            "return": {
                "description": "Array of pictures paths",
                "type": "Array"
            },
            "chainable": 1,
            "class": "UIFormCamera",
            "module": "UI"
        },
        {
            "file": "uiformcamera.js",
            "line": 84,
            "description": "Remove picture from input",
            "params": [
                {
                    "name": "picture",
                    "description": "Picture to be removed",
                    "type": "UIFormCameraPicture"
                }
            ],
            "itemtype": "method",
            "name": "remove",
            "class": "UIFormCamera",
            "module": "UI"
        },
        {
            "file": "uiformcamera.js",
            "line": 97,
            "description": "Export picture data",
            "itemtype": "method",
            "name": "export",
            "return": {
                "description": "Exported data (ej: base 64 string)",
                "type": "String"
            },
            "params": [
                {
                    "name": "options",
                    "description": "A list of options",
                    "type": "Array"
                }
            ],
            "chainable": 1,
            "class": "UIFormCamera",
            "module": "UI"
        },
        {
            "file": "uiformdraw.js",
            "line": 44,
            "description": "Export draw data",
            "itemtype": "method",
            "name": "export",
            "return": {
                "description": "Exported data (ej: base 64 string)",
                "type": "String"
            },
            "params": [
                {
                    "name": "options",
                    "description": "A list of options",
                    "type": "Array"
                }
            ],
            "chainable": 1,
            "class": "UIFormDraw",
            "module": "UI"
        },
        {
            "file": "uiformdraw.js",
            "line": 56,
            "description": "Clear draw",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "class": "UIFormDraw",
            "module": "UI"
        },
        {
            "file": "uiformfieldset.js",
            "line": 43,
            "description": "Disable/enable input field",
            "itemtype": "method",
            "name": "disabled",
            "params": [
                {
                    "name": "state",
                    "description": "State of the input, true if disabled false if enabled",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Boolean state",
                "type": "Boolean"
            },
            "class": "UIFormFieldset",
            "module": "UI"
        },
        {
            "file": "uiformgeo.js",
            "line": 44,
            "description": "Get current position",
            "itemtype": "method",
            "name": "get",
            "chainable": 1,
            "class": "UIFormGeo",
            "module": "UI"
        },
        {
            "file": "uiforminput.js",
            "line": 43,
            "description": "Disable/enable input field",
            "itemtype": "method",
            "name": "disabled",
            "params": [
                {
                    "name": "state",
                    "description": "State of the input, true if disabled false if enabled",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Boolean state",
                "type": "Boolean"
            },
            "class": "UIFormInput",
            "module": "UI"
        },
        {
            "file": "uiformpseudoinput.js",
            "line": 43,
            "description": "Value of the input",
            "itemtype": "property",
            "name": "value",
            "class": "UIFormPseudoInput",
            "module": "UI"
        },
        {
            "file": "uiformpseudoinput.js",
            "line": 50,
            "description": "Sets an event handler for the input",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "Defines in which event the handler will be called",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to be called when the event is fired.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "UIFormPseudoInput",
            "module": "UI"
        },
        {
            "file": "uiformtoggleswitch.js",
            "line": 44,
            "description": "Set/get input toggle switch value",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "value",
                    "description": "Value of the input",
                    "type": "Boolean"
                }
            ],
            "class": "UIFormToggleSwitch",
            "module": "UI"
        },
        {
            "file": "uiheader.js",
            "line": 129,
            "description": "Back\nThe back button",
            "object": "back",
            "return": {
                "description": "",
                "type": "UINavItem"
            },
            "class": "UIHeader",
            "module": "UI"
        },
        {
            "file": "uiheader.js",
            "line": 138,
            "description": "Title\nThe text to display in the header\nIf called with no arguments returns the current title",
            "itemtype": "method",
            "name": "title",
            "params": [
                {
                    "name": "title",
                    "description": "The text for the title",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "chainable": 1,
            "class": "UIHeader",
            "module": "UI"
        },
        {
            "file": "uiloading.js",
            "line": 33,
            "description": "Show/Hide the loading indicator",
            "itemtype": "method",
            "name": "loading",
            "params": [
                {
                    "name": "show",
                    "description": "Show or hide the loading indicator",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "UIApp",
            "module": "UI"
        },
        {
            "file": "uiloading.js",
            "line": 96,
            "description": "Set the style for the loading animation",
            "itemtype": "method",
            "name": "style",
            "params": [
                {
                    "name": "options",
                    "description": "Style options TODO: Define this object's structure",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "UILoading"
            },
            "chainable": 1,
            "class": "UIApp",
            "module": "UI"
        },
        {
            "file": "uinavitem.js",
            "line": 45,
            "description": "Block/Unblock or return block status.",
            "itemtype": "method",
            "name": "blocked",
            "params": [
                {
                    "name": "blocked",
                    "description": "Whether the item is blocked",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Whether the panel is blocked",
                "type": "Boolean"
            },
            "chainable": 1,
            "class": "UINavItem",
            "module": "UI"
        },
        {
            "file": "uipanel.js",
            "line": 99,
            "description": "Initialize  a panel",
            "itemtype": "method",
            "name": "_init",
            "access": "private",
            "tagname": "",
            "class": "UIPanel",
            "module": "UI"
        },
        {
            "file": "uipanel.js",
            "line": 183,
            "description": "Move the element to the specified position inside the UIApp / m-views-container. \nIf coordinates are not specified, it returns coordinates object with the current position.",
            "itemtype": "method",
            "name": "position",
            "params": [
                {
                    "name": "coordinates",
                    "description": "Object with coordinates. Example: {x: 0, y: 0}",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Object with coordinates. Example: {x: 0, y: 0}",
                "type": "Object"
            },
            "class": "UIPanel",
            "module": "UI"
        },
        {
            "file": "uipanel.js",
            "line": 204,
            "description": "Block/Unblock or return block status.",
            "itemtype": "method",
            "name": "blocked",
            "params": [
                {
                    "name": "blocked",
                    "description": "Whether the panel is blocked",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Whether the panel is blocked",
                "type": "Boolean"
            },
            "class": "UIPanel",
            "module": "UI"
        },
        {
            "file": "uipanel.js",
            "line": 215,
            "description": "Set or get transition type",
            "itemtype": "method",
            "name": "transition",
            "params": [
                {
                    "name": "transition",
                    "description": "Transition type. MUST be one of: slide-left, slide-right, none",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Transition type",
                "type": "String"
            },
            "class": "UIPanel",
            "module": "UI"
        },
        {
            "file": "view.js",
            "line": 110,
            "description": "Views collection",
            "access": "private",
            "tagname": "",
            "class": "View",
            "module": "View"
        },
        {
            "file": "view.js",
            "line": 116,
            "description": "Current active view",
            "access": "private",
            "tagname": "",
            "class": "View",
            "module": "View"
        },
        {
            "file": "view.js",
            "line": 122,
            "description": "Init View instance, load HTML, CSS and JavaScript files for the view",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_init",
            "params": [
                {
                    "name": "options",
                    "description": "A list of options",
                    "type": "Array"
                },
                {
                    "name": "self",
                    "description": "View instance",
                    "type": "View"
                }
            ],
            "class": "View",
            "module": "View"
        },
        {
            "file": "view.js",
            "line": 153,
            "description": "Get view HTML",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getHtml",
            "params": [
                {
                    "name": "self",
                    "description": "View instance",
                    "type": "View"
                }
            ],
            "class": "View",
            "module": "View"
        },
        {
            "file": "view.js",
            "line": 256,
            "description": "Title is the friendly name for the current view.\nWhen called without parameters, returns a string containing the title. When called with parameters, sets the title.",
            "itemtype": "method",
            "name": "title",
            "params": [
                {
                    "name": "title",
                    "description": "New title for this view.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "string"
            },
            "class": "View",
            "module": "View"
        },
        {
            "file": "view.js",
            "line": 274,
            "description": "Sets an event handler for the view\nPossible values for event: load, beforeLoad, unload, beforeUnload, init\nTODO: Define which parameters are passed to the callback function.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "Defines in which event the handler will be called",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to be called when the event is fired.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "View"
            },
            "class": "View",
            "module": "View"
        },
        {
            "file": "view.js",
            "line": 293,
            "description": "Unsets event handlers for the view\nPossible values for event: load, beforeLoad, unload, beforeUnload, init",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "event",
                    "description": "Defines in which event we want to unset handlers",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "If this parameter is specified, only that function is removed. Otherwise all callbacks for this event are removed.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "View"
            },
            "class": "View",
            "module": "View"
        },
        {
            "file": "view.js",
            "line": 310,
            "description": "Create or get a view",
            "itemtype": "method",
            "name": "view",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the view",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options object for the view",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "View the referenced view object"
            },
            "class": "App",
            "module": "View"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: object",
            "line": " uiheader.js:129"
        },
        {
            "message": "Missing item type\nEvents collection",
            "line": " event.js:19"
        },
        {
            "message": "Missing item type\nAdd event to collection",
            "line": " event.js:25"
        },
        {
            "message": "Missing item type\nDispatch event",
            "line": " event.js:36"
        },
        {
            "message": "Missing item type\nExtend objects with Event methods",
            "line": " event.js:60"
        },
        {
            "message": "Missing item type\nBack\nThe back button",
            "line": " uiheader.js:129"
        },
        {
            "message": "Missing item type\nViews collection",
            "line": " view.js:110"
        },
        {
            "message": "Missing item type\nCurrent active view",
            "line": " view.js:116"
        }
    ]
}